// This file is auto-generated by scripts/generate-search-data.js
// Do not edit manually - changes will be overwritten during build
// Run 'npm run generate-search' to regenerate from page content

export interface SearchItem {
  id: string;
  title: string;
  description: string;
  content: string;
  url: string;
  category: string;
  tags: string[];
}

export const searchData: SearchItem[] = [
  {
    "id": "adding-commands",
    "title": "Adding Commands",
    "description": "Creating and implementing commands to control robot subsystems.",
    "content": "Commands - Coordinating Robot Actions Commands are the \"actions\" that your robot performs. They use subsystems to accomplish tasks and can be triggered by user input, sensors, or automated sequences. üéØ Key Concept: Commands tell subsystems what action to run. Command Structure & Examples üéÆ Inline Command Methods Example üéØ Trigger Examples - Binding Input to Commands üè† Default Commands Default commands run when no other command is using the subsystem. They are set in the subsystem constructor. setDefaultCommand(stopCommand()); üéÆ Trigger Types Different trigger types for different behaviors: onTrue (once), whileTrue (continuous), toggleOnTrue (toggle). controller.a().whileTrue(command); üöÄ Motor Configuration Motor configuration code should be wrapped properly to fit in configuration sections. motor.getConfigurator() &nbsp;&nbsp;&nbsp;&nbsp;.apply(config); moveUp(): Positive voltage for upward movement\", \"‚Ä¢ moveDown(): Negative voltage for downward movement\" ], rightTitle: \"Command Integration\", rightItems: [ \"‚Ä¢ RobotContainer: Xbox controller instantiation\", \"‚Ä¢ Button Bindings: A/B buttons control arm direction\", \"‚Ä¢ Default Command: runSlow(): Low voltage (3V) for testing\", \"‚Ä¢ runFast(): High voltage (6V) for shooting\" ], rightTitle: \"Command Integration\", rightItems: [ \"‚Ä¢ X/Y buttons control flywheel speed\", \"‚Ä¢ ü§ñ RobotContainer Implementation Commands /building-subsystems Subsystems /running-program Running Program bg-focus-50 dark:bg-focus-900/20 text-[var(--foreground)] rounded-lg p-8 border border-focus-200 dark:border-focus-800 text-3xl font-bold text-slate-900 dark:text-slate-100 mb-4 text-[var(--muted-foreground)] mb-4 bg-learn-100 dark:bg-learn-900/30 p-4 rounded-lg text-learn-800 dark:text-learn-300 font-medium flex flex-col gap-8 text-3xl font-bold text-slate-900 dark:text-slate-100 card p-6 text-xl font-bold text-primary-600 mb-4 cursor-pointer hover:text-primary-700 dark:hover:text-primary-300 mt-4 java Subsystem Command Methods RobotContainer.java - configureBindings() grid md:grid-cols-3 gap-6 bg-concept-100 dark:bg-concept-900/20 rounded-lg p-6 border border-concept-200 dark:border-concept-800 text-lg font-bold text-concept-700 dark:text-concept-300 mb-3 text-concept-800 dark:text-concept-300 text-sm mb-3 bg-[var(--muted)] text-[var(--muted-foreground)] p-3 rounded text-xs bg-primary-50 dark:bg-primary-950/30 rounded-lg p-6 border border-primary-200 dark:border-primary-900 text-lg font-bold text-primary-700 dark:text-primary-300 mb-3 text-primary-800 dark:text-primary-300 text-sm mb-3 bg-learn-100 dark:bg-learn-900/20 rounded-lg p-6 border border-learn-200 dark:border-learn-900 text-lg font-bold text-learn-700 dark:text-learn-300 mb-3 text-learn-800 dark:text-learn-300 text-sm mb-3 Workshop Implementation ‚Ä¢ Arm subsystem with basic voltage control ‚Ä¢ No user input integration ‚Ä¢ No commands to coordinate actions ‚Ä¢ Manual method calls only ‚Ä¢ Enhanced Arm subsystem methods ‚Ä¢ Xbox controller integration ‚Ä¢ Commands for moveUp(), moveDown() ‚Ä¢ RobotContainer with proper binding ‚Ä¢ Default command for safety Hemlock5712/Workshop-Code src/main/java/frc/robot/subsystems/Arm.java 2-Commands Arm.java New Subsystem Methods ‚Ä¢ <strong>moveUp():</strong> Positive voltage for upward movement ‚Ä¢ <strong>moveDown():</strong> Negative voltage for downward movement Command Integration ‚Ä¢ <strong>RobotContainer:</strong> Xbox controller instantiation ‚Ä¢ <strong>Button Bindings:</strong> A/B buttons control arm direction ‚Ä¢ <strong>Default Command:</strong> Stop arm when no input Our Arm now responds to user input! Next, we ‚Ä¢ Flywheel subsystem with basic voltage control ‚Ä¢ Enhanced Flywheel subsystem methods ‚Ä¢ Commands for runSlow(), runFast() src/main/java/frc/robot/subsystems/Flywheel.java Flywheel.java ‚Ä¢ <strong>runSlow():</strong> Low voltage (3V) for testing ‚Ä¢ <strong>runFast():</strong> High voltage (6V) for shooting ‚Ä¢ <strong>Button Bindings:</strong> X/Y buttons control flywheel speed ‚Ä¢ <strong>Default Command:</strong> Stop flywheel when no input Our Flywheel now responds to user input! Next, we bg-slate-50 dark:bg-slate-900 rounded-lg p-6 shadow-lg border border-slate-200 dark:border-slate-800 src/main/java/frc/robot/RobotContainer.java m-0",
    "url": "/adding-commands",
    "category": "Workshop 1",
    "tags": [
      "adding-commands",
      "robot",
      "command",
      "subsystem",
      "motor",
      "control",
      "java",
      "workshop",
      "frc"
    ]
  },
  {
    "id": "building-subsystems",
    "title": "Building Subsystems",
    "description": "Creating subsystems for robot mechanisms and understanding subsystem structure.",
    "content": "Subsystems - Understanding the Foundation Subsystems are the foundation of command-based programming. They represent physical hardware components and provide methods to control them safely and effectively. üéØ Key Concept: One subsystem per mechanism. Each subsystem manages its own hardware and state. Subsystem Structure & Code Examples üì¶ Basic Subsystem Example üîß Hardware Instantiation Motors, sensors, and other hardware objects are declared as private fields at the top of the class. TalonFX motor = new TalonFX(1); ‚öôÔ∏è Configuration Location Motor configurations, current limits, and mode settings go in the constructor to run once at startup. motor.getConfigurator() &nbsp;&nbsp;&nbsp;&nbsp;.apply(config); üîÑ Periodic Method Runs every 20ms (50Hz). Use for telemetry, monitoring, and updating dashboard values - not for control! SmartDashboard.putNumber( &nbsp;&nbsp;&nbsp;&nbsp;\"Value\", sensor.get()); Caution: Physical Hardware vs Code Example The flywheel device built in this workshop does not have a physical follower motor. However, the following code examples include a follower motor setup to demonstrate best practices for multi-motor subsystems. Note: If implementing on actual hardware, you would either remove the follower motor code or add a second physical motor to your flywheel mechanism. TalonFX Motor: Main drive motor with integrated controller\", \"‚Ä¢ CANCoder: Absolute position feedback sensor\", \"‚Ä¢ Remote Sensor: CANCoder connected as remote feedback\" ], rightTitle: \"Key Methods\", rightItems: [ \"‚Ä¢ setVoltage(): Direct voltage control for basic movement\", \"‚Ä¢ stop(): Safe motor stop with neutral output\", \"‚Ä¢ periodic(): Leader Motor: TalonFX controlling the flywheel mechanism\", \"‚Ä¢ Follower Motor: Second TalonFX following the leader\", \"‚Ä¢ CANivore Bus: High-speed CAN bus for motor communication\" ], rightTitle: \"Key Methods\", rightItems: [ \"‚Ä¢ Direct voltage control for flywheel speed\", \"‚Ä¢ Safe motor stop with neutral output\", \"‚Ä¢ Subsystems /command-framework Command-Based Framework /adding-commands Commands bg-focus-50 dark:bg-focus-900/20 text-[var(--foreground)] rounded-lg p-8 border border-focus-200 dark:border-focus-800 text-3xl font-bold text-slate-900 dark:text-slate-100 mb-4 mb-4 bg-learn-100 dark:bg-learn-900/30 p-4 rounded-lg text-learn-800 dark:text-learn-300 font-medium flex flex-col gap-8 text-3xl font-bold text-slate-900 dark:text-slate-100 bg-slate-50 dark:bg-slate-900 rounded-lg p-6 shadow-lg border border-slate-200 dark:border-slate-800 text-xl font-bold text-primary-600 mb-4 cursor-pointer hover:text-primary-700 dark:hover:text-primary-300 mt-4 java ExampleSubsystem.java Motor Position Motor Velocity Motor Current grid md:grid-cols-3 gap-6 bg-learn-100 dark:bg-learn-900/20 rounded-lg p-6 border border-learn-200 dark:border-learn-800 text-lg font-bold text-learn-700 dark:text-learn-300 mb-3 text-learn-800 dark:text-learn-300 text-sm mb-3 bg-slate-50 dark:bg-slate-900 p-3 rounded text-xs bg-yellow-50 dark:bg-yellow-900/20 border border-yellow-200 dark:border-yellow-800 rounded-lg p-6 flex items-start gap-3 w-6 h-6 text-yellow-600 dark:text-yellow-400 flex-shrink-0 mt-0.5 none currentColor 0 0 24 24 round M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.732-.833-2.464 0L4.35 16.5c-.77.833.192 2.5 1.732 2.5z text-lg font-bold text-yellow-800 dark:text-yellow-300 mb-2 text-yellow-700 dark:text-yellow-300 mb-3 bg-yellow-100 dark:bg-yellow-900/30 p-3 rounded border border-yellow-200 dark:border-yellow-700 text-yellow-800 dark:text-yellow-200 text-sm Workshop Implementation ‚Ä¢ Basic WPILib project structure ‚Ä¢ No hardware integration ‚Ä¢ No subsystem implementation ‚Ä¢ Complete Arm subsystem class ‚Ä¢ TalonFX motor (ID: 31) configured ‚Ä¢ CANCoder sensor (ID: 22) integrated ‚Ä¢ Basic voltage control methods Hemlock5712/Workshop-Code src/main/java/frc/robot/subsystems/Arm.java 1-Subsystem Arm.java Hardware Setup ‚Ä¢ <strong>TalonFX Motor:</strong> Main drive motor with integrated controller ‚Ä¢ <strong>CANCoder:</strong> Absolute position feedback sensor ‚Ä¢ <strong>Remote Sensor:</strong> CANCoder connected as remote feedback Key Methods ‚Ä¢ <strong>setVoltage():</strong> Direct voltage control for basic movement ‚Ä¢ <strong>stop():</strong> Safe motor stop with neutral output ‚Ä¢ <strong>periodic():</strong> Understand that periodic runs every robot loop This subsystem is ready for command integration! Next, we ‚Ä¢ Complete Flywheel subsystem class ‚Ä¢ Dual TalonFX motors (IDs: 21, 22) configured ‚Ä¢ Leader/follower motor setup src/main/java/frc/robot/subsystems/Flywheel.java Flywheel.java ‚Ä¢ <strong>Leader Motor:</strong> TalonFX controlling the flywheel mechanism ‚Ä¢ <strong>Follower Motor:</strong> Second TalonFX following the leader ‚Ä¢ <strong>CANivore Bus:</strong> High-speed CAN bus for motor communication ‚Ä¢ <strong>setVoltage():</strong> Direct voltage control for flywheel speed This flywheel subsystem is ready for command integration! Next, we",
    "url": "/building-subsystems",
    "category": "Workshop 1",
    "tags": [
      "building-subsystems",
      "command",
      "hardware",
      "control",
      "subsystem",
      "motor",
      "workshop",
      "java",
      "frc",
      "robot"
    ]
  },
  {
    "id": "command-framework",
    "title": "Command-Based Framework",
    "description": "Understanding the command-based programming paradigm and its benefits for robot code organization.",
    "content": "Command-Based Framework - Core Programming Concepts The Command-Based Framework organizes robot code into three key components: Triggers (inputs), Subsystems (hardware), and Commands (actions). This structure provides clean separation of concerns and reliable robot behavior. üéØ Key Concept: Command-based programming is the format in which you will write your code. Triggers Use BooleanSuppliers (True or False) Link inputs to commands (e.g., press button to drive forward, or use sensor to run Command automatically). All buttons/triggers on a game controller are considered \"Triggers\". Subsystems Hardware components and control logic (e.g., Drivetrain, Arm, or Flywheel). Motors and sensors are instantiated. Methods to pull data from sensors within the subsystem are defined. Commands Use Runnables (void functions) Encapsulate robot actions (e.g., DriveForwardCommand, ShootBallCommand). Progressive Implementation Path Follow our step-by-step implementation guide to build a complete command-based robot system. Each pull request builds on the previous one, teaching core concepts progressively. üöÄ Implementation Sequence Building Subsystems Hardware instantiation, motor configuration, and basic control methods Adding Commands Command structure, lifecycle, and controller integration PID Control Precise position control with feedback and tuning Motion Magic Smooth profiled motion with acceleration control Useful Functions Safety features, diagnostics, and utility functions üìö Official WPILib Command-Based Documentation For comprehensive Command-Based Framework reference, advanced patterns, and complete API documentation: üìñ WPILib Command-Based Programming Guide Command-Based Framework /project-setup Project Setup /building-subsystems bg-focus-50 dark:bg-focus-900/20 text-[var(--foreground)] rounded-lg p-8 border border-focus-200 dark:border-focus-800 text-3xl font-bold text-slate-900 dark:text-slate-100 mb-4 text-[var(--muted-foreground)] mb-4 bg-learn-100 dark:bg-learn-900/30 p-4 rounded-lg text-learn-800 dark:text-learn-300 font-medium grid md:grid-cols-3 gap-6 bg-slate-50 dark:bg-slate-900 rounded-lg p-6 shadow-lg border border-slate-200 dark:border-slate-800 text-xl font-bold text-[var(--foreground)] mb-3 text-slate-600 dark:text-slate-300 mb-3 text-sm text-slate-500 dark:text-slate-400 flex flex-col gap-8 text-3xl font-bold text-slate-900 dark:text-slate-100 text-slate-600 dark:text-slate-300 grid md:grid-cols-1 gap-6 text-xl font-bold text-[var(--foreground)] mb-4 space-y-4 flex items-center gap-4 p-4 bg-primary-50 dark:bg-primary-950/20 rounded-lg bg-primary-500 text-white rounded-full w-8 h-8 flex items-center justify-center font-bold font-bold text-primary-700 dark:text-primary-300 text-primary-600 dark:text-primary-400 text-sm flex items-center gap-4 p-4 bg-primary-100 dark:bg-primary-900/30 rounded-lg bg-primary-600 text-white rounded-full w-8 h-8 flex items-center justify-center font-bold font-bold text-primary-800 dark:text-primary-200 text-primary-700 dark:text-primary-300 text-sm flex items-center gap-4 p-4 bg-primary-200 dark:bg-primary-800/40 rounded-lg bg-primary-700 text-white rounded-full w-8 h-8 flex items-center justify-center font-bold font-bold text-primary-900 dark:text-primary-100 text-primary-800 dark:text-primary-200 text-sm flex items-center gap-4 p-4 bg-primary-300 dark:bg-primary-700/50 rounded-lg bg-primary-800 text-white rounded-full w-8 h-8 flex items-center justify-center font-bold font-bold text-primary-950 dark:text-white text-primary-900 dark:text-primary-100 text-sm flex items-center gap-4 p-4 bg-primary-400 dark:bg-primary-600/60 rounded-lg bg-primary-900 text-white rounded-full w-8 h-8 flex items-center justify-center font-bold font-bold text-slate-900 dark:text-white text-slate-800 dark:text-slate-100 text-sm bg-[var(--muted)] rounded-lg p-6 border-l-4 border-[var(--border)] text-[var(--foreground)] mb-4 https://docs.wpilib.org/en/stable/docs/software/commandbased/index.html _blank noopener noreferrer inline-flex items-center px-6 py-3 bg-indigo-600 text-white rounded-lg hover:bg-indigo-700 transition-colors font-medium ml-2 w-4 h-4 none currentColor 0 0 24 24 round M10 6H6a2 2 0 00-2 2v10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14",
    "url": "/command-framework",
    "category": "Workshop 1",
    "tags": [
      "command-framework",
      "command",
      "robot",
      "hardware",
      "control",
      "subsystem",
      "motor",
      "pid"
    ]
  },
  {
    "id": "hardware",
    "title": "Hardware Setup",
    "description": "Overview of CTRE hardware components including Kraken X44 motors, CANcoders, and CANivore setup.",
    "content": "Hardware Setup - Building the Foundation Overview of the motors, sensors, and controllers you'll connect for this workshop. üéØ Key Concept: Solid hardware configuration enables precise and reliable robot control. Hardware Components Kraken X44 Brushless Motor Powered by Talon FX‚Ñ¢ Compact brushless motor with integrated Talon FX‚Ñ¢ controller. Delivers 823W peak power. Key Features: 4.05Nm stall torque, 85% max efficiency, 125.5 RPS max speed, SplineXS shaft, FOC commutation, 1kHz PID control, compact 44mm design. WCP ThroughBore Encoder ‚Äì CAN Bus Position Sensor Through bore rotary sensor using innovative off-axis magnet technology. Eliminates mechanical coupling for precise shaft position measurement. 1/2\" hex shaft compatible, through bore design, absolute/relative position, CAN bus connectivity, versatile mounting options. CANivore‚Ñ¢ ‚Äì CAN FD Bus Expansion USB-to-CAN FD interface that adds new CAN FD network to PC or roboRIO. Enables precise control of CTRE devices with Phoenix Pro and hardware-attached simulation. CAN FD technology (2X-8X better bus utilization), wireless configuration, ESP32 integration, multi-color status LEDs, USB Type-C support. Why We Choose CTRE Hardware üéØ CTRE's Unique Advantages Full PID Control Complete PID implementation with kP, kI, kD, and advanced filtering options that other vendors don't provide. Feedforward (FF) Built-in feedforward control for gravity compensation and velocity control that competitors lack. Motion Profiling Advanced Motion Magic and motion profiling capabilities for smooth, controlled movements. Rotations Units Motor positions measured in intuitive rotations instead of confusing encoder ticks or radians. üîß Phoenix Software Resources ‚Üí CANivore Introduction ‚Üí Phoenix 6 Documentation ‚Üí Phoenix 6 API Reference ‚Üí Phoenix Tuner X Documentation Connecting to Your Device ‚ö†Ô∏è Important Setup Steps Plug the computer into CANivore Make sure the \"CANivore USB\" is checked Change \"Team # or IP\" to \"localhost\" Your CANivore should now appear in Phoenix Tuner For this workshop, please name your CANivore: \"canivore\" Updating Your CTRE Products Using Phoenix Tuner Open Phoenix Tuner and connect to your robot If you have issues connecting to your robot, view this guide Batch update all products of the same model Select one of the devices and then click the batch update icons Verify Updates The device cards will be green if the firmware is the latest Motor Update Process & Status Colors üì± How to Update Motors Use Phoenix Tuner to update your motor firmware. Select devices and use the batch update feature to ensure all motors are running the latest firmware version. üé® Card Colors The color of the device cards is helpful as a visual indicator of device state. The meaning of the card color is also shown as text underneath the device title. Color Description Green Device has latest firmware. Purple Device has an unexpected/beta firmware version. Yellow A new firmware version is available. Red Device has a duplicate ID. Blue Failed to retrieve list of available firmware. üí° Tip: Always update all motors to the same firmware version for consistency and use batch update to save time when updating multiple devices. Having Issues? If you are having issues connecting to your CANivore or other devices, make sure to update your CANivore firmware. Let's Run Some Motors! Testing Motor Movement Quick Test Steps: Open up your motor in Phoenix Tuner Click Config Click the three dots Factory Default Set the drop-down to Voltage Out DISABLED to enable Apply voltage to test the motor ‚ö° Safety First Always start with low voltage values when testing motors. Make sure your mechanism can move freely and won't cause damage. Hardware Setup /mechanism-cad Mechanism CAD /project-setup Project Setup bg-focus-50 dark:bg-focus-900/20 text-[var(--foreground)] rounded-lg p-8 border border-focus-200 dark:border-focus-800 text-3xl font-bold text-slate-900 dark:text-slate-100 mb-4 text-[var(--muted-foreground)] mb-4 bg-learn-100 dark:bg-learn-900/30 p-4 rounded-lg text-learn-800 dark:text-learn-300 font-medium flex flex-col gap-8 text-3xl font-bold text-slate-900 dark:text-slate-100 grid md:grid-cols-1 lg:grid-cols-3 gap-8 bg-slate-50 dark:bg-slate-900 rounded-lg p-6 shadow-lg border border-slate-200 dark:border-slate-800 /images/hardware/Kraken44x.png Kraken Motor mb-4 text-xl font-bold text-slate-900 dark:text-slate-100 mb-3 https://store.ctr-electronics.com/products/kraken-x44 _blank noopener noreferrer text-primary-600 hover:text-primary-800 underline dark:text-primary-400 dark:hover:text-primary-300 text-slate-600 dark:text-slate-300 mb-3 bg-primary-100 dark:bg-primary-900/20 p-3 rounded-lg text-sm text-primary-800 dark:text-primary-300 /images/hardware/Encoder.png CANCoder https://store.ctr-electronics.com/products/wcp-throughbore-encoder /images/hardware/CANivore.png CANivore https://store.ctr-electronics.com/canivore/ bg-primary-50 dark:bg-primary-950/30 rounded-lg p-8 border border-slate-200 dark:border-slate-800 text-xl font-semibold text-slate-900 dark:text-slate-100 mb-4 grid md:grid-cols-4 gap-4 bg-slate-50 dark:bg-slate-900 p-4 rounded-lg border border-slate-200 dark:border-slate-800 font-bold text-primary-600 dark:text-primary-400 mb-2 text-sm text-slate-600 dark:text-slate-300 font-bold text-[var(--foreground)] mb-2 font-bold text-green-600 dark:text-green-400 mb-2 font-bold text-orange-600 dark:text-orange-400 mb-2 mt-8 bg-slate-50 dark:bg-slate-900 rounded-lg p-6 border border-slate-200 dark:border-slate-800 grid md:grid-cols-2 gap-4 https://v6.docs.ctr-electronics.com/en/stable/docs/canivore/canivore-intro.html block text-primary-600 underline hover:no-underline hover:text-primary-800 dark:text-primary-400 dark:hover:text-primary-300 font-medium https://v6.docs.ctr-electronics.com/ https://v6.docs.ctr-electronics.com/en/stable/docs/api-reference/ https://v6.docs.ctr-electronics.com/en/stable/docs/tuner/ bg-focus-100 dark:bg-focus-900/20 border border-focus-200 dark:border-focus-800 rounded-lg p-6 text-lg font-semibold text-focus-700 dark:text-focus-300 mb-3 list-decimal list-inside space-y-2 text-focus-800 dark:text-focus-300 bg-slate-50 dark:bg-slate-900 rounded-lg p-8 shadow-lg border border-slate-200 dark:border-slate-800 space-y-4 flex items-start space-x-3 bg-green-500 text-white rounded-full w-6 h-6 flex items-center justify-center text-sm font-bold font-medium text-slate-600 dark:text-slate-300 text-sm https://v6.docs.ctr-electronics.com/en/stable/docs/tuner/connecting.html#connecting-tuner text-primary-600 underline hover:no-underline dark:text-primary-400 ml-1 bg-slate-50 dark:bg-slate-900 rounded-lg p-6 shadow-lg border border-slate-200 dark:border-slate-800 mx-auto flex flex-col gap-4 text-xl font-semibold text-slate-900 dark:text-slate-100 https://www.youtube.com/embed/aktcCtcrEyY Motor Update Process accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture w-full h-full aspect-video rounded-lg bg-primary-100 dark:bg-primary-900/20 border border-blue-200 dark:border-blue-900 rounded-lg p-6 text-lg font-semibold text-primary-900 dark:text-primary-300 mb-4 text-blue-800 dark:text-blue-300 mb-4 bg-slate-50 dark:bg-slate-900 rounded-lg p-4 overflow-x-auto w-full text-left border-b border-slate-200 dark:border-slate-700 py-2 px-3 font-semibold text-slate-900 dark:text-slate-100 w-32 py-2 px-3 font-semibold text-slate-900 dark:text-slate-100 text-sm border-b border-slate-100 dark:border-slate-800 py-3 px-3 align-top flex items-center whitespace-nowrap inline-block w-4 h-4 bg-green-500 rounded-full mr-2 flex-shrink-0 text-green-700 dark:text-green-400 py-3 px-3 text-slate-700 dark:text-slate-300 align-top inline-block w-4 h-4 bg-concept-500 rounded-full mr-2 flex-shrink-0 text-concept-700 dark:text-concept-400 inline-block w-4 h-4 bg-yellow-500 rounded-full mr-2 flex-shrink-0 text-yellow-700 dark:text-yellow-400 inline-block w-4 h-4 bg-red-500 rounded-full mr-2 flex-shrink-0 text-red-700 dark:text-red-400 inline-block w-4 h-4 bg-blue-500 rounded-full mr-2 flex-shrink-0 text-blue-700 dark:text-primary-400 mt-4 p-3 bg-blue-100 dark:bg-blue-900/50 rounded-lg text-blue-800 dark:text-blue-300 text-sm text-slate-600 dark:text-slate-300 https://www.youtube.com/embed/TkScJADvD-Y CANivore Setup bg-[var(--card)] text-[var(--foreground)] rounded-lg p-8 border border-[var(--border)] text-xl font-semibold text-[var(--foreground)] mb-4 grid md:grid-cols-2 gap-6 mb-6 font-semibold text-[var(--foreground)] mb-3 list-decimal list-inside space-y-2 text-[var(--foreground)] bg-slate-50 dark:bg-slate-900 p-4 rounded-lg border border-[var(--border)] font-semibold text-slate-900 dark:text-slate-100 mb-2 https://www.youtube.com/embed/cDWF3bj1Juk Motor Test",
    "url": "/hardware",
    "category": "Workshop 1",
    "tags": [
      "hardware",
      "workshop",
      "robot",
      "control",
      "motor",
      "pid",
      "ctre"
    ]
  },
  {
    "id": "introduction",
    "title": "Introduction - Gray Matter Coding Workshop",
    "description": "Overview of the workshop goals, target audience, and what you'll learn about FRC programming best practices.",
    "content": "Quick Note All underlined text and images of code or products will have built-in links to resources üöÄ Why are we here? Learn FRC's Best Programming Practices Master industry-standard coding patterns, command-based architecture, and proven development workflows that successful FRC teams use. Build Competition-Winning Robots Develop reliable, maintainable code that performs under pressure and helps your team succeed at regional and world championships. üéØ Target Audience & Goals Who This Workshop Is For This workshop is designed for FRC Teams using Java and CTRE Hardware. What You'll Learn ‚Ä¢ Code architecture and best practices ‚Ä¢ Subsystems structure and organization ‚Ä¢ Command-based programming framework ‚Ä¢ PID tuning techniques ‚Ä¢ Libraries and framework usage ‚Ä¢ Hardware integration with CTRE devices ‚Ä¢ Motion profiling and control ‚Ä¢ Real-world competition implementation Our Mission This site was put together by Team 5712 and help from others as a resource to help cover introduction to advanced materials and to give a clear learning and implementation plan. The goal is to learn code architecture, command base programming, PID tuning, libraries, odometry, vision, and more! Choose Your Workshop Workshop #1 Fundamentals of FRC programming with command-based framework, subsystems, and PID control. Hardware Setup Project Setup Command-Based Framework Building Subsystems Adding Commands Running Program Mechanism Setup PID Control Motion Magic Start Workshop #1 Workshop #2 Advanced topics including swerve drive, vision systems, path planning, and data logging. Creating a Swerve Drive Project Adding PathPlanner Vision Options Implementing Vision Logging Options Implementing Logging Vision-Based Shooting Coming Soon Gray Matter Coding Workshop Home /prerequisites Prerequisites bg-primary-50 dark:bg-primary-950/30 border-l-4 border-primary-400 dark:border-primary-900 p-6 text-lg font-medium text-primary-900 dark:text-primary-300 mb-2 text-primary-800 dark:text-primary-300 flex flex-col gap-8 text-3xl font-bold text-slate-900 dark:text-slate-100 space-y-6 border-l-4 border-orange-200 dark:border-orange-900 pl-4 text-lg font-semibold text-slate-900 dark:text-slate-100 text-slate-600 dark:text-slate-300 mt-2 border-l-4 border-green-200 dark:border-green-900 pl-4 border-l-4 border-purple-200 dark:border-purple-900 pl-4 text-xl font-semibold text-slate-900 dark:text-slate-100 mb-3 text-lg text-slate-600 dark:text-slate-300 mb-4 border-l-4 border-blue-200 dark:border-blue-900 pl-4 grid md:grid-cols-2 gap-4 space-y-2 text-slate-600 dark:text-slate-300 border-l-4 border-amber-200 dark:border-amber-900 pl-4 text-lg text-slate-600 dark:text-slate-300 grid md:grid-cols-2 gap-8 bg-slate-50 dark:bg-slate-900 rounded-lg p-8 shadow-lg border border-slate-200 dark:border-slate-800 hover:shadow-xl transition-shadow flex items-center mb-4 w-12 h-12 bg-primary-600 rounded-lg flex items-center justify-center text-white font-bold text-xl mr-4 text-2xl font-bold text-slate-900 dark:text-slate-100 text-slate-600 dark:text-slate-300 mb-6 space-y-3 mb-6 /hardware block p-3 bg-slate-100 dark:bg-slate-800 rounded-lg hover:bg-primary-100 dark:hover:bg-primary-950/30 transition-colors group flex items-center justify-between font-medium text-slate-700 dark:text-slate-300 group-hover:text-primary-700 dark:group-hover:text-primary-300 text-slate-400 dark:text-slate-500 group-hover:text-primary-500 dark:group-hover:text-primary-300 /project-setup /command-framework /building-subsystems /adding-commands /running-program /mechanism-setup /pid-control /motion-magic w-full bg-primary-600 text-white py-3 px-4 rounded-lg font-semibold hover:bg-primary-700 transition-colors text-center block bg-slate-50 dark:bg-slate-900 rounded-lg p-8 shadow-lg border border-slate-200 dark:border-slate-800 opacity-60 w-12 h-12 bg-slate-400 rounded-lg flex items-center justify-center text-white font-bold text-xl mr-4 p-3 bg-slate-100 dark:bg-slate-800 rounded-lg font-medium text-slate-500 dark:text-slate-400 w-full bg-slate-400 text-white py-3 px-4 rounded-lg font-semibold cursor-not-allowed text-center block",
    "url": "/introduction",
    "category": "Getting Started",
    "tags": [
      "introduction",
      "frc",
      "command",
      "workshop",
      "java",
      "ctre",
      "hardware",
      "pid",
      "control"
    ]
  },
  {
    "id": "logging-implementation",
    "title": "Implementing Logging",
    "description": "Setting up and implementing comprehensive logging systems for robot data collection.",
    "content": "Implementing Logging /logging-options Logging Options /vision-shooting Vision-Based Shooting",
    "url": "/logging-implementation",
    "category": "Workshop 2",
    "tags": [
      "logging-implementation"
    ]
  },
  {
    "id": "logging-options",
    "title": "Logging Options",
    "description": "Data logging options for robot debugging, analysis, and performance monitoring.",
    "content": "Logging Options /vision-implementation Implementing Vision /logging-implementation Implementing Logging",
    "url": "/logging-options",
    "category": "Workshop 2",
    "tags": [
      "logging-options"
    ]
  },
  {
    "id": "mechanism-cad",
    "title": "Mechanism CAD",
    "description": "3D CAD models and visualization of robot mechanisms used in the workshop.",
    "content": "Mechanism CAD - 3D Model Exploration Before diving into programming, we first need a physical mechanism. If you do not have a previous robot or mechanism below are 3D models of mechanisms you can build affordably. üéØ Key Concept: Interactive 3D model of the Flywheel mechanism. Interactive 3D Models Flywheel Mechanism This 3D model represents the mechanism you'll be programming in this workshop. Use your mouse to orbit around the model, zoom in/out, and examine the design from different angles. Download STL File Coming Soon Interactive 3D model coming soon Arm Mechanism An Arm mechanism for Workshop programming. This arm mechanism demonstrates precise positioning and control concepts that are essential in FRC robotics. What's Next? Ready for Programming!!! Now that you have a mechanism, you're ready to move on to connecting and configuring the code to make this work. We'll cover motors, sensors, and controllers needed to bring this CAD model to life. use client Mechanism CAD /prerequisites Prerequisites /hardware Hardware Setup bg-focus-50 dark:bg-focus-900/20 text-[var(--foreground)] rounded-lg p-8 border border-focus-200 dark:border-focus-800 text-3xl font-bold text-slate-900 dark:text-slate-100 mb-4 text-[var(--muted-foreground)] mb-4 bg-learn-100 dark:bg-learn-900/30 p-4 rounded-lg text-learn-800 dark:text-learn-300 font-medium flex flex-col gap-8 text-3xl font-bold text-slate-900 dark:text-slate-100 bg-slate-50 dark:bg-slate-900 rounded-lg p-8 shadow-lg border border-slate-200 dark:border-slate-800 flex flex-col items-center gap-6 w-full max-w-4xl /cad/HTTI Mechanism v1 - Shooter Mode.gltf w-full shadow-lg text-center space-y-4 text-xl font-semibold text-slate-900 dark:text-slate-100 text-slate-600 dark:text-slate-300 max-w-2xl https://github.com/Hemlock5712/Workshop-Site/raw/refs/heads/master/public/cad/HTTI%20Mechanism%20v1%20-%20Shooter%20Mode.stl?download= HTTI Mechanism v1 - Shooter Mode.stl inline-flex items-center gap-2 bg-primary-600 text-white px-6 py-3 rounded-lg font-semibold hover:bg-primary-700 transition-colors shadow-md w-5 h-5 none currentColor 0 0 24 24 round M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z w-full max-w-4xl h-96 flex items-center justify-center bg-slate-100 dark:bg-slate-800 rounded-lg border-2 border-dashed border-slate-300 dark:border-slate-600 w-16 h-16 mx-auto bg-slate-200 dark:bg-slate-700 rounded-full flex items-center justify-center w-8 h-8 text-slate-500 dark:text-slate-400 M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z text-xl font-semibold text-slate-600 dark:text-slate-300 text-slate-500 dark:text-slate-400 mt-8 bg-primary-50 dark:bg-primary-950/30 rounded-lg p-8 border border-primary-200 dark:border-primary-900 flex items-start space-x-4 flex-shrink-0 flex items-center justify-center w-12 h-12 bg-primary-100 dark:bg-primary-900/50 rounded-lg w-6 h-6 text-primary-600 dark:text-primary-400 M13 10V3L4 14h7v7l9-11h-7z text-lg font-semibold text-primary-900 dark:text-primary-300 mb-2 text-primary-800 dark:text-primary-300",
    "url": "/mechanism-cad",
    "category": "Resources",
    "tags": [
      "mechanism-cad",
      "robot",
      "workshop",
      "control",
      "frc",
      "hardware"
    ]
  },
  {
    "id": "mechanism-setup",
    "title": "Mechanism Setup",
    "description": "Configuring specific robot mechanisms and their control systems.",
    "content": "(\"arm\"); return ( Mechanism Setup - Verifying Hardware Configuration Before implementing advanced control algorithms, we need to verify that motors and encoders are working correctly. This ensures proper direction, zeroing, and basic functionality. üéØ Key Concept: Always verify hardware setup before adding control algorithms. Otherwise you will be debugging control issues when the problem is hardware configuration. Warning: Stop Code Before Hardware Setup Before performing hardware setup tasks, stop any running code and turn the \"CANivore USB\" setting in TunerX. This ensures proper communication with physical hardware during testing and configuration. Steps: Stop any running robot code ‚Üí Open TunerX ‚Üí Go to CANivore settings ‚Üí Enable \"CANivore USB\" Setup Steps by Mechanism ü¶æ Arm Mechanism ‚ö° Flywheel Mechanism 1Ô∏è‚É£ Encoder Direction You'll need to make sure your encoder is configured correctly. With the device facing you, as shown in the following picture, please make sure that the encoder position increases as you rotate the arm counterclockwise. Expected Behavior: ‚Ä¢ Counterclockwise rotation ‚Üí Position increases ‚Ä¢ Clockwise rotation ‚Üí Position decreases üîß Implementation Sequence Rotate Counter-Clockwise Manually rotate the mechanism counter-clockwise and observe if the encoder position increases. Fix Direction if Needed If position goes down instead of up, go to \"Info\" ‚Üí \"Sensor Direction\" ‚Üí press \"Apply\" button to invert the encoder direction. Zero the Encoder Put arm to zero position, then in TunerX go to \"Info\" ‚Üí press \"0 encoder\" button ‚Üí press \"Apply\" button. 2Ô∏è‚É£ Verifying Motor Setup You'll want to make sure your motor is spinning in the expected direction. If the motor is getting positive voltage, it should be spinning counterclockwise. You can check this through tuner, with the device facing you as in the following picture. üîß Motor Direction Verification Positive Voltage Test Apply +6V to your motor and observe movement direction. Expected: Positive voltage should move the mechanism in the \"positive\" direction (counter-clockwise for arms). Encoder Consistency Verify encoder readings match motor movement. Positive motor voltage ‚Üí positive encoder change, negative motor voltage ‚Üí negative encoder change. ) : ( 1Ô∏è‚É£ Verifying Motor Setup You'll want to make sure your flywheel motors are spinning in the expected direction. If the motor is getting positive voltage, both motors should spin in the same direction (leader-follower setup). You can check this through tuner. ‚Ä¢ Leader and follower motors spin together ‚Ä¢ Positive voltage ‚Üí Shooting Apply +6V to your flywheel and observe rotation. Both motors should rotate smoothly in the same direction with consistent speed. Leader-Follower Check Verify follower motor tracks leader motor exactly. Follower motor should mirror leader motor movements with minimal lag. ‚úÖ Ready for Control Once your mechanism moves in the correct direction and provides accurate feedback (encoder for arms, motor consistency for flywheels), you're ready to implement advanced control algorithms. üí° Next Step: With verified hardware setup, we can now implement PID control for precise mechanism control. The control algorithm will use sensor feedback to automatically reach target positions or velocities. use client arm flywheel Mechanism Setup /running-program Running Program /pid-control PID Control bg-focus-50 dark:bg-focus-900/20 text-[var(--foreground)] rounded-lg p-8 border border-focus-200 dark:border-focus-800 text-3xl font-bold text-slate-900 dark:text-slate-100 mb-4 text-[var(--muted-foreground)] mb-4 bg-learn-100 dark:bg-learn-900/30 p-4 rounded-lg text-learn-800 dark:text-learn-300 font-medium bg-red-50 dark:bg-red-900/20 border border-red-200 dark:border-red-800 rounded-lg p-6 flex items-start gap-3 w-6 h-6 text-red-600 dark:text-red-400 flex-shrink-0 mt-0.5 none currentColor 0 0 24 24 round M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.732-.833-2.464 0L4.35 16.5c-.77.833.192 2.5 1.732 2.5z text-lg font-bold text-red-800 dark:text-red-300 mb-2 text-red-700 dark:text-red-300 mb-3 bg-red-100 dark:bg-red-900/30 p-3 rounded border border-red-200 dark:border-red-700 text-red-800 dark:text-red-200 text-sm flex flex-col gap-8 text-3xl font-bold text-slate-900 dark:text-slate-100 card border-b border-[var(--border)] flex border-primary-600 text-primary-600 border-transparent text-[var(--muted-foreground)] hover:text-[var(--foreground)] p-6 card p-8 text-2xl font-bold text-[var(--foreground)] mb-6 grid grid-cols-2 gap-6 mb-6 bg-primary-50 dark:bg-primary-950/30 p-4 rounded-lg font-semibold text-primary-900 dark:text-primary-300 mb-2 text-primary-800 dark:text-primary-300 space-y-1 text-sm flex flex-row gap-8 justify-center items-center mb-8 /images/setup/unit_circle_degrees_rotations_decimal.png Unit circle showing counterclockwise rotation direction rounded-lg /images/setup/counter-clockwise.png Counterclockwise rotation direction https://www.youtube.com/embed/zJgSQKrz8yE Encoder Setup and Verification accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture w-full aspect-video rounded-lg mb-8 bg-slate-50 dark:bg-slate-900 rounded-lg p-6 shadow-lg border border-slate-200 dark:border-slate-800 text-xl font-bold text-[var(--foreground)] mb-4 space-y-4 flex items-center gap-4 p-4 bg-primary-50 dark:bg-primary-950/20 rounded-lg bg-primary-500 text-white rounded-full w-8 h-8 flex items-center justify-center font-bold font-bold text-primary-700 dark:text-primary-300 text-primary-600 dark:text-primary-400 text-sm flex items-center gap-4 p-4 bg-primary-100 dark:bg-primary-900/30 rounded-lg bg-primary-600 text-white rounded-full w-8 h-8 flex items-center justify-center font-bold font-bold text-primary-800 dark:text-primary-200 text-primary-700 dark:text-primary-300 text-sm flex items-center gap-4 p-4 bg-primary-200 dark:bg-primary-800/40 rounded-lg bg-primary-700 text-white rounded-full w-8 h-8 flex items-center justify-center font-bold font-bold text-primary-900 dark:text-primary-100 text-primary-800 dark:text-primary-200 text-sm grid grid-cols-3 gap-6 mb-8 col-span-2 text-[var(--muted-foreground)] flex w-full justify-center /images/mechanisms/arm.jpg Arm https://www.youtube.com/embed/iQqR1Wxptzg Motor Testing w-full aspect-video rounded-lg mt-8 text-xl font-bold text-learn-600 mb-4 grid md:grid-cols-2 gap-6 bg-[var(--card)] text-[var(--foreground)] p-6 rounded-lg font-semibold mb-3 text-sm mb-3 bg-[var(--muted)] text-[var(--muted-foreground)] p-3 rounded border border-[var(--border)] text-xs text-[var(--muted-foreground)] col-span-2 /images/mechanisms/flywheel.png Flywheel mechanism for motor verification bg-[var(--muted)] border border-[var(--border)] rounded-lg p-6 bg-indigo-50 dark:bg-indigo-950/30 p-4 rounded mt-4 text-indigo-800 dark:text-indigo-300 text-sm",
    "url": "/mechanism-setup",
    "category": "Workshop 1",
    "tags": [
      "mechanism-setup",
      "hardware",
      "control",
      "robot",
      "motor",
      "pid"
    ]
  },
  {
    "id": "motion-magic",
    "title": "Motion Magic",
    "description": "Advanced motion profiling using CTRE's Motion Magic for smooth, controlled movements.",
    "content": "Motion Magic - Profiled Motion Control Motion Magic builds on PID control by adding smooth acceleration and deceleration profiles. This prevents jerky movements and reduces mechanical stress while maintaining precise positioning. üéØ Key Concept: Motion Magic automatically generates smooth velocity profiles to reach target positions with controlled acceleration. Understanding Motion Magic Profiles üìà Trapezoidal Profile Motion Magic creates a trapezoidal velocity profile with three phases: 1. Acceleration: Ramp up to cruise velocity 2. Cruise: Maintain constant max velocity 3. Deceleration: Smoothly brake to target ‚öôÔ∏è Key Parameters Motion Magic Cruise Velocity Maximum velocity during cruise phase (rotations/second) Motion Magic Acceleration Rate of acceleration/deceleration (rotations/second¬≤) Motion Magic Jerk Rate of change of acceleration (rotations/second¬≥) üìö Official Motion Magic Documentation For complete Motion Magic reference, configuration examples, and advanced tuning techniques: üìñ CTRE Motion Magic API Reference Motion Magic Implementation in Code üîß Motion Magic Configuration Example Cruise Velocity (2.0): Maximum speed during motion\", \"‚Ä¢ Acceleration (8.0): How quickly to reach cruise speed\", \"‚Ä¢ Jerk (80.0): Smoothness of acceleration changes\", \"‚Ä¢ MotionMagicVoltage: Replaces PositionVoltage for profiled control\" ], rightTitle: \"Enhanced Features\", rightItems: [ \"‚Ä¢ Setpoint Detection: Checks both position AND velocity\", \"‚Ä¢ Smooth Motion: Eliminates jerky arm movements\", \"‚Ä¢ Mechanical Safety: Reduces stress on gearboxes\", \"‚Ä¢ Predictable Timing: Acceleration: How quickly to reach target velocity\", \"‚Ä¢ Jerk: MotionMagicVelocity: Replaces VelocityVoltage for profiled control\", \"‚Ä¢ Velocity Targeting: Precise speed control with smooth ramping\" ], rightTitle: \"Enhanced Features\", rightItems: [ \"‚Ä¢ Checks both velocity AND acceleration\", \"‚Ä¢ Eliminates sudden flywheel speed changes\", \"‚Ä¢ Reduces stress on motors and mechanisms\", \"‚Ä¢ ‚öñÔ∏è Motion Magic vs Basic PID When to Use Basic PID: Simple positioning tasks Continuous control (like maintaining angle) When speed of response is critical Mechanisms with very low inertia When to Use Motion Magic: Large, heavy mechanisms (arms, elevators) When smooth motion is important Preventing mechanical stress Predictable motion timing needed ‚öôÔ∏è Motion Magic Tuning Steps 1. Find Maximum Velocity: Plot velocity without Motion Magic Move mechanism the maximum distance it will travel Record the maximum velocity it reaches Store this value in your code as a constant MAX_VELOCITY = 8.5; // rps from plot 2. Set Motion Magic Parameters: Cruise Velocity: Use 80% of max velocity cruiseVel = MAX_VELOCITY * 0.8 Use 4x cruise velocity for smooth motion Use 10x cruise velocity for quicker motion acceleration = cruiseVel * 4.0 üí° Why This Method Works: By measuring actual mechanism performance first, you set realistic motion limits that prevent oscillation and ensure smooth, achievable motion profiles. The 80% cruise velocity provides headroom for control corrections while maintaining good performance. Motion Magic /pid-control PID Control Home bg-focus-50 dark:bg-focus-900/20 text-[var(--foreground)] rounded-lg p-8 border border-focus-200 dark:border-focus-800 text-3xl font-bold text-slate-900 dark:text-slate-100 mb-4 text-[var(--foreground)] mb-4 bg-learn-100 dark:bg-learn-900/30 p-4 rounded-lg text-learn-800 dark:text-learn-300 font-medium flex flex-col gap-8 text-3xl font-bold text-slate-900 dark:text-slate-100 grid md:grid-cols-2 gap-6 bg-[var(--muted)] rounded-lg p-6 border-l-4 border-[var(--border)] text-xl font-bold text-[var(--foreground)] mb-4 text-[var(--foreground)] mb-4 text-sm space-y-2 bg-slate-50 dark:bg-slate-900 p-3 rounded text-[var(--foreground)] text-[var(--muted-foreground)] text-sm bg-[var(--muted)] rounded-lg p-6 border-l-4 border-blue-500 space-y-3 font-bold text-[var(--foreground)] https://v6.docs.ctr-electronics.com/en/latest/docs/api-reference/device-specific/talonfx/motion-magic.html _blank noopener noreferrer inline-flex items-center px-6 py-3 bg-indigo-600 text-white rounded-lg hover:bg-indigo-700 transition-colors font-medium ml-2 w-4 h-4 none currentColor 0 0 24 24 round M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14 bg-slate-50 dark:bg-slate-900 rounded-lg p-6 shadow-lg border border-slate-200 dark:border-slate-800 text-xl font-bold text-primary-600 mb-4 cursor-pointer hover:text-primary-700 dark:hover:text-primary-300 mt-4 java Motion Magic Setup in Subsystem Constructor Workshop Implementation: Motion Magic ‚Ä¢ PID position control with PositionVoltage ‚Ä¢ Instant acceleration to target ‚Ä¢ Potential mechanical stress from jerky movements ‚Ä¢ No velocity planning or profiling ‚Ä¢ Abrupt start/stop motions ‚Ä¢ Motion Magic profiled motion with MotionMagicVoltage ‚Ä¢ Smooth acceleration and deceleration curves ‚Ä¢ Reduced mechanical stress and wear ‚Ä¢ Configurable cruise velocity and acceleration ‚Ä¢ Professional, smooth motion profiles Hemlock5712/Workshop-Code src/main/java/frc/robot/subsystems/Arm.java 4-MotionMagic Arm.java Motion Magic Parameters ‚Ä¢ <strong>Cruise Velocity (2.0):</strong> Maximum speed during motion ‚Ä¢ <strong>Acceleration (8.0):</strong> How quickly to reach cruise speed ‚Ä¢ <strong>Jerk (80.0):</strong> Smoothness of acceleration changes ‚Ä¢ <strong>MotionMagicVoltage:</strong> Replaces PositionVoltage for profiled control Enhanced Features ‚Ä¢ <strong>Setpoint Detection:</strong> Checks both position AND velocity ‚Ä¢ <strong>Smooth Motion:</strong> Eliminates jerky arm movements ‚Ä¢ <strong>Mechanical Safety:</strong> Reduces stress on gearboxes ‚Ä¢ <strong>Predictable Timing:</strong> Known motion duration Motion Magic gives us professional-grade position control! Next, we ‚Ä¢ PID velocity control with VelocityVoltage ‚Ä¢ Instant acceleration to target speed ‚Ä¢ Potential mechanical stress from sudden velocity changes ‚Ä¢ Motion Magic profiled velocity with MotionMagicVelocity ‚Ä¢ Configurable acceleration and jerk for velocity changes ‚Ä¢ Professional, smooth velocity transitions src/main/java/frc/robot/subsystems/Flywheel.java Flywheel.java ‚Ä¢ <strong>Acceleration:</strong> How quickly to reach target velocity ‚Ä¢ <strong>Jerk:</strong> Smoothness of acceleration changes ‚Ä¢ <strong>MotionMagicVelocity:</strong> Replaces VelocityVoltage for profiled control ‚Ä¢ <strong>Velocity Targeting:</strong> Precise speed control with smooth ramping ‚Ä¢ <strong>Setpoint Detection:</strong> Checks both velocity AND acceleration ‚Ä¢ <strong>Smooth Motion:</strong> Eliminates sudden flywheel speed changes ‚Ä¢ <strong>Mechanical Safety:</strong> Reduces stress on motors and mechanisms ‚Ä¢ <strong>Predictable Timing:</strong> Known velocity change duration Motion Magic gives us professional-grade velocity control! Next, we bg-[var(--muted)] rounded-lg p-6 border-l-4 border-yellow-500 text-xl font-bold text-[var(--foreground)] mb-4 cursor-pointer hover:text-[var(--foreground)] dark:hover:text-[var(--foreground)] font-semibold text-[var(--foreground)] mb-2 text-sm text-[var(--foreground)] space-y-1 list-disc list-inside text-sm text-[var(--foreground)] space-y-2 list-disc list-inside bg-slate-50 dark:bg-slate-800 px-1 rounded bg-[var(--muted)] p-4 rounded mt-4 border-l-4 border-[var(--border)] text-[var(--foreground)] text-sm",
    "url": "/motion-magic",
    "category": "Workshop 1",
    "tags": [
      "motion-magic",
      "control",
      "pid",
      "ctre",
      "java",
      "subsystem",
      "workshop",
      "frc",
      "robot"
    ]
  },
  {
    "id": "home",
    "title": "Gray Matter Coding Workshop - Home",
    "description": "Learn FRC's best programming practices to build a robot good enough to win events.",
    "content": "Hemlock's Gray Matter - Team 5712 Coding Workshop Learn FRC's best programming practices to build a robot good enough to win events. Master code architecture, subsystems, PID tuning, libraries, and more! Ready to build competition-winning robot code? Start Workshop What We're Programming Learn to control real FRC mechanisms through hands-on programming. Master motor control, PID tuning, encoder feedback, and motion profiling with these competition-proven designs. Arm Position Control Program precise arm positioning using PID control, encoder feedback, and Motion Magic for smooth, controlled movements to scoring positions. Flywheel Velocity Control Master velocity control for consistent shooting performance using feedforward control and velocity PID for rapid spin-up and accuracy. Special thanks to: The Team: Joe Lockwood, Josh Bacon, Chris Bale, Alex Haltom, and Team 5712 Ethan Shannon and Team 5216 max-w-6xl mx-auto px-4 py-12 flex flex-col gap-8 text-center flex flex-col gap-8 text-3xl md:text-4xl font-bold text-slate-900 dark:text-slate-100 text-center text-xl text-slate-600 dark:text-slate-300 max-w-3xl mx-auto max-w-lg mx-auto text-center text-slate-600 dark:text-slate-400 mb-6 text-lg /introduction inline-block bg-primary-600 text-white px-12 py-5 rounded-xl text-2xl font-bold hover:bg-primary-700 transition-all duration-200 transform hover:scale-105 shadow-lg hover:shadow-xl bg-slate-50 dark:bg-slate-900 rounded-lg p-8 shadow-lg border border-slate-200 dark:border-slate-800 text-3xl font-bold text-slate-900 dark:text-slate-100 mb-6 text-center text-slate-600 dark:text-slate-300 text-center mb-8 max-w-3xl mx-auto grid md:grid-cols-2 gap-8 bg-white dark:bg-slate-800 rounded-lg p-6 shadow-md border border-slate-200 dark:border-slate-700 mb-4 /images/mechanisms/arm.jpg Robot Arm Mechanism w-full h-48 object-cover rounded-lg shadow-sm bg-primary-100 dark:bg-primary-900/20 p-4 rounded-lg text-xl font-semibold text-primary-900 dark:text-primary-300 mb-2 text-primary-700 dark:text-primary-300 text-sm /images/mechanisms/flywheel.png Flywheel Mechanism bg-green-100 dark:bg-green-900/20 p-4 rounded-lg text-xl font-semibold text-green-900 dark:text-green-300 mb-2 text-green-700 dark:text-green-300 text-sm bg-[var(--card)] text-[var(--foreground)] p-8 rounded-lg text-center space-y-6 space-y-6 grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 items-center justify-items-center https://store.ctr-electronics.com/ _blank noopener noreferrer w-48 h-32 flex items-center justify-center bg-white dark:bg-slate-800 rounded-lg p-2 shadow-sm hover:shadow-md transition-shadow cursor-pointer /images/sponsors/ctre-logo.jpg CTR Electronics Logo max-w-full max-h-full object-contain https://michauto.org/ /images/sponsors/MichAuto Logo 600x600.png MichAuto Logo https://www.michiganbusiness.org/ofme/ /images/sponsors/OFME-Logo.png Michigan Office of Future Mobility and Electrification Logo https://lockwoodstemcenter.hemlockps.com/home /images/sponsors/lockwood-stem-center-logo.png Lockwood STEM Center Logo text-lg font-semibold text-slate-900 dark:text-slate-100 mb-2 text-slate-600 dark:text-slate-300",
    "url": "/",
    "category": "General",
    "tags": [
      "workshop",
      "frc",
      "robot",
      "pid",
      "control",
      "motor",
      "ctre"
    ]
  },
  {
    "id": "pathplanner",
    "title": "Adding PathPlanner",
    "description": "Integrating PathPlanner for autonomous path planning and trajectory following.",
    "content": "Adding PathPlanner /swerve-drive-project Creating a Swerve Drive Project /vision-options Vision Options",
    "url": "/pathplanner",
    "category": "Workshop 2",
    "tags": [
      "pathplanner"
    ]
  },
  {
    "id": "pid-control",
    "title": "PID Control",
    "description": "Understanding and implementing PID control for precise robot positioning and movement.",
    "content": "PID Control - Precise Position Control PID (Proportional-Integral-Derivative) control replaces imprecise voltage commands with accurate, feedback-driven position control. Essential for mechanisms that need to hit specific targets. üéØ Key Concept: PID uses sensor feedback to automatically adjust motor output to reach and maintain target positions. Understanding PID Components P - Proportional Definition: \"The amount of output to apply per unit of error in the system\" Error = Target - Current P_Output = kP √ó Error Behavior: Larger error = stronger correction. Provides immediate response but may cause oscillation. I - Integral \"The amount of output to apply per unit of error for every second of that error\" Accumulated_Error += Error √ó dt I_Output = kI √ó Accumulated_Error Eliminates steady-state error by accumulating past errors over time. D - Derivative \"The amount of output to apply per change in error over time\" Error_Rate = (Error - Last_Error) / dt D_Output = kD √ó Error_Rate Reduces overshoot by predicting future error trends and dampening response. ‚ö° Feedforward Gains Feedforward gains help the system by predicting the required output based on the target, rather than reacting to error. kS - Static Constant output to overcome friction and get the mechanism moving. kG - Gravity Compensates for gravitational forces acting on the mechanism. kV - Velocity Output applied per target velocity to maintain smooth motion. kA - Acceleration Output applied per target acceleration for responsive movement. üìö Complete PID Tuning Guide For detailed PID tuning instructions, step-by-step processes, and mechanism-specific guidance: üìñ CTRE Manual PID Tuning Guide PID Implementation in Code üîß PID Configuration Example PositionVoltage: Replaces VoltageOut for closed-loop control\", \"‚Ä¢ Slot0 Config: PID and feedforward gains configuration\", \"‚Ä¢ Target Setting: setTargetPosition() method for precise control\" ], rightTitle: \"Gain Values Used\", rightItems: [ \"‚Ä¢ kP = 24.0: Strong proportional response\", \"‚Ä¢ kD = 0.1: Small derivative for damping\", \"‚Ä¢ kS = 0.25: Static friction compensation\", \"‚Ä¢ kG = 0.12: VelocityVoltage: Replaces VoltageOut for closed-loop velocity control\", \"‚Ä¢ PID and feedforward gains configuration for velocity\", \"‚Ä¢ setTargetVelocity() method for precise speed control\" ], rightTitle: \"Gain Values Used\", rightItems: [ \"‚Ä¢ kP: Proportional response for velocity error\", \"‚Ä¢ kI: Integral gain to eliminate steady-state velocity error\", \"‚Ä¢ kS: Static friction compensation for startup\", \"‚Ä¢ kV: PID Control /mechanism-setup Mechanism Setup /motion-magic Motion Magic bg-focus-50 dark:bg-focus-900/20 text-[var(--foreground)] rounded-lg p-8 border border-focus-200 dark:border-focus-800 text-3xl font-bold text-slate-900 dark:text-slate-100 mb-4 text-[var(--muted-foreground)] mb-4 bg-learn-100 dark:bg-learn-900/30 p-4 rounded-lg text-learn-800 dark:text-learn-300 font-medium flex flex-col gap-8 text-3xl font-bold text-slate-900 dark:text-slate-100 grid md:grid-cols-3 gap-6 bg-[var(--muted)] rounded-lg p-6 border-l-4 border-red-500 text-xl font-bold text-[var(--foreground)] mb-4 text-[var(--foreground)] mb-4 text-sm bg-[var(--muted)] text-[var(--muted-foreground)] p-4 rounded mb-3 text-xs text-[var(--foreground)] text-sm bg-[var(--muted)] rounded-lg p-6 border-l-4 border-yellow-500 bg-[var(--muted)] rounded-lg p-6 border-l-4 border-blue-500 bg-[var(--muted)] rounded-lg p-6 border-l-4 border-[var(--border)] text-[var(--foreground)] mb-4 grid md:grid-cols-4 gap-4 bg-focus-100 dark:bg-focus-900/20 p-4 rounded text-[var(--foreground)] font-bold mb-2 text-sm https://phoenixpro-documentation--161.org.readthedocs.build/en/161/docs/application-notes/manual-pid-tuning.html _blank noopener noreferrer inline-flex items-center px-6 py-3 bg-indigo-600 text-white rounded-lg hover:bg-indigo-700 transition-colors font-medium ml-2 w-4 h-4 none currentColor 0 0 24 24 round M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14 bg-slate-50 dark:bg-slate-900 rounded-lg p-6 shadow-lg border border-slate-200 dark:border-slate-800 text-xl font-bold text-primary-600 mb-4 cursor-pointer hover:text-primary-700 dark:hover:text-primary-300 mt-4 java PID Setup in Subsystem Constructor Workshop Implementation: PID Control ‚Ä¢ Commands control Arm with voltage ‚Ä¢ No position feedback control ‚Ä¢ Imprecise, inconsistent movement ‚Ä¢ No automatic target reaching ‚Ä¢ Manual voltage adjustment needed ‚Ä¢ PID position control with PositionVoltage ‚Ä¢ Automatic target position reaching ‚Ä¢ Precise, repeatable movements ‚Ä¢ Feedforward compensation for gravity ‚Ä¢ Tolerance checking for \\ Hemlock5712/Workshop-Code src/main/java/frc/robot/subsystems/Arm.java 3-PID Arm.java PID Implementation ‚Ä¢ <strong>PositionVoltage:</strong> Replaces VoltageOut for closed-loop control ‚Ä¢ <strong>Slot0 Config:</strong> PID and feedforward gains configuration ‚Ä¢ <strong>Target Setting:</strong> setTargetPosition() method for precise control Gain Values Used ‚Ä¢ <strong>kP = 24.0:</strong> Strong proportional response ‚Ä¢ <strong>kD = 0.1:</strong> Small derivative for damping ‚Ä¢ <strong>kS = 0.25:</strong> Static friction compensation ‚Ä¢ <strong>kG = 0.12:</strong> Gravity feedforward for Arm PID gives us precise position control! In the next section, we ‚Ä¢ Commands control Flywheel with voltage ‚Ä¢ No velocity feedback control ‚Ä¢ Inconsistent speed control ‚Ä¢ No automatic velocity targeting ‚Ä¢ PID velocity control with VelocityVoltage ‚Ä¢ Automatic target velocity reaching ‚Ä¢ Consistent, repeatable speeds ‚Ä¢ Feedforward compensation for friction ‚Ä¢ Velocity tolerance checking for \\ src/main/java/frc/robot/subsystems/Flywheel.java Flywheel.java ‚Ä¢ <strong>VelocityVoltage:</strong> Replaces VoltageOut for closed-loop velocity control ‚Ä¢ <strong>Slot0 Config:</strong> PID and feedforward gains configuration for velocity ‚Ä¢ <strong>Target Setting:</strong> setTargetVelocity() method for precise speed control ‚Ä¢ <strong>kP:</strong> Proportional response for velocity error ‚Ä¢ <strong>kI:</strong> Integral gain to eliminate steady-state velocity error ‚Ä¢ <strong>kS:</strong> Static friction compensation for startup ‚Ä¢ <strong>kV:</strong> Velocity feedforward for smooth operation PID gives us precise velocity control! In the next section, we",
    "url": "/pid-control",
    "category": "Workshop 1",
    "tags": [
      "pid-control",
      "pid",
      "control",
      "motor",
      "ctre",
      "java",
      "subsystem",
      "workshop",
      "frc",
      "robot"
    ]
  },
  {
    "id": "prerequisites",
    "title": "Prerequisites",
    "description": "Required software and hardware setup before starting the workshop.",
    "content": "üìã Software Requirements WPILib Game Tools Install WPILib VS Code and National Instruments Game Tool (includes Driver Station and roboRIO imaging). Phoenix Tuner X Essential for configuring and tuning TalonFX and other CTRE hardware. Git Use Git for version control. Summarize changes clearly (e.g., 'Add drivetrain PID tuning logic'). PathPlanner Allows you to draw paths for your swerve drive to follow. Elastic Dashboard Drivers use a dashboard to easily view the robot and key items, such as selecting autonomous routines or viewing motor errors. Java Knowledge Ideally, some basic knowledge of Java coding (optional but recommended). Ready to Start? Make sure you have all the prerequisites installed before proceeding to the hardware setup section. Prerequisites /introduction Introduction /mechanism-cad Mechanism CAD grid gap-6 bg-slate-50 dark:bg-slate-900 rounded-lg p-6 shadow-lg border border-slate-200 dark:border-slate-800 text-3xl font-bold text-slate-900 dark:text-slate-100 mb-4 space-y-6 border-l-4 border-primary-200 dark:border-primary-900 pl-4 text-lg font-semibold text-slate-900 dark:text-slate-100 https://docs.wpilib.org/en/stable/docs/zero-to-robot/step-2/wpilib-setup.html text-primary-600 underline hover:no-underline dark:text-primary-400 _blank noopener noreferrer https://www.ni.com/en/support/downloads/drivers/download.frc-game-tools.html#553883 text-slate-600 dark:text-slate-300 mt-2 border-l-4 border-learn-200 dark:border-learn-900 pl-4 https://apps.microsoft.com/detail/9NVV4PWDW27Z text-learn-600 underline hover:no-underline dark:text-learn-400 border-l-4 border-concept-200 dark:border-concept-900 pl-4 https://git-scm.com/downloads text-concept-600 underline hover:no-underline dark:text-concept-400 border-l-4 border-orange-200 dark:border-orange-900 pl-4 https://github.com/mjansen4857/pathplanner/releases text-orange-600 underline hover:no-underline dark:text-orange-400 border-l-4 border-red-200 dark:border-red-900 pl-4 https://github.com/Gold872/elastic-dashboard text-red-600 underline hover:no-underline dark:text-red-400 border-l-4 border-yellow-200 dark:border-yellow-900 pl-4 https://www.codecademy.com/learn/learn-java text-yellow-600 underline hover:no-underline dark:text-yellow-400 bg-primary-50 dark:bg-primary-950/30 border border-primary-200 dark:border-primary-900 rounded-lg p-6 mb-8 text-lg font-semibold text-primary-700 dark:text-primary-300 mb-2 text-primary-800 dark:text-primary-300",
    "url": "/prerequisites",
    "category": "Getting Started",
    "tags": [
      "prerequisites",
      "ctre",
      "hardware",
      "control",
      "pid",
      "robot",
      "motor",
      "java",
      "frc"
    ]
  },
  {
    "id": "project-setup",
    "title": "Project Setup",
    "description": "Creating a new WPILib project and configuring it for CTRE hardware integration.",
    "content": "Project Setup - Launching Your Codebase Step-by-step guide to generating a new WPILib project using the Command framework template. üéØ Key Concept: Starting with the right template ensures organized commands and subsystems. Creating a New WPILib Project Follow these step-by-step instructions to create a new FRC robot project using the Command Robot Skeleton (Advanced) template. Open VSCode Launch Visual Studio Code with the WPILib extension installed. Select the WPILib Logo in Top Right Corner Click on the WPILib logo/icon in the top right corner of VSCode. Select \"Create a New Project\" From the WPILib menu, choose the \"Create a new project\" option. Select \"Select a project type (Example or Template)\" Choose Template ‚Üí Java ‚Üí Command Robot Skeleton (Advanced) Base folder select \"Downloads\" Warning: OneDrive locations are not supported and will cause project creation to fail. Project Name \"Workshop\" Enter \"Workshop\" as your project name. Team Number Enter your FRC team number. This is required for deploying code to your robot. Check \"Enable Desktop Support\" This allows you to test your robot code on your computer without a robot. Generate Project Click \"Generate Project\" and then open the new project when prompted. üí° Next Step: After creating your project, you'll learn about the Command-Based Framework in the next section. Your project will be ready for implementing subsystems and commands! Project Setup /hardware Hardware Setup /command-framework Command-Based Framework bg-focus-50 dark:bg-focus-900/20 text-[var(--foreground)] rounded-lg p-8 border border-focus-200 dark:border-focus-800 text-3xl font-bold text-slate-900 dark:text-slate-100 mb-4 text-[var(--muted-foreground)] mb-4 bg-learn-100 dark:bg-learn-900/30 p-4 rounded-lg text-learn-800 dark:text-learn-300 font-medium bg-slate-50 dark:bg-slate-900 rounded-lg p-8 shadow-lg border border-slate-200 dark:border-slate-800 text-3xl font-bold text-slate-900 dark:text-slate-100 mb-6 text-slate-600 dark:text-slate-300 mb-6 space-y-4 flex items-start space-x-3 bg-primary-500 text-white rounded-full w-6 h-6 flex items-center justify-center text-sm font-bold font-medium text-slate-600 dark:text-slate-300 text-sm bg-red-50 dark:bg-red-950/30 border border-red-200 dark:border-red-900 rounded p-3 mt-2 text-red-800 dark:text-red-300 text-sm bg-practice-500 text-white rounded-full w-6 h-6 flex items-center justify-center text-sm font-bold https://www.youtube.com/embed/Y8ExsyaCC34 Project Setup Tutorial accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture w-full h-full aspect-video rounded-lg bg-indigo-50 dark:bg-indigo-950/30 p-4 rounded mt-4 text-indigo-800 dark:text-indigo-300 text-sm",
    "url": "/project-setup",
    "category": "Workshop 1",
    "tags": [
      "project-setup",
      "command",
      "frc",
      "robot",
      "java",
      "workshop",
      "hardware"
    ]
  },
  {
    "id": "running-program",
    "title": "Running Program",
    "description": "Deploying and running robot code with hardware simulation and testing.",
    "content": "Running Program - Hardware Simulation Testing WPILib provides a powerful tool called Hardware Simulation. This allows you to run your code in the simulator, while also running motors that are connected to the CANivore. üéØ Key Concept: Hardware simulation eliminates the need to use a roboRIO for testing, while still allowing you to test your code on hardware. Important: CANivore USB Setting Before running Hardware Simulation code, you must turn OFF the \"CANivore USB\" setting in TunerX. This prevents conflicts between the simulation environment and physical hardware communication. Steps: Open TunerX ‚Üí Go to CANivore settings ‚Üí Disable \"CANivore USB\" Hardware Simulation Setup Running Program /adding-commands Commands /mechanism-setup Mechanism Setup bg-focus-50 dark:bg-focus-900/20 text-[var(--foreground)] rounded-lg p-8 border border-focus-200 dark:border-focus-800 text-3xl font-bold text-slate-900 dark:text-slate-100 mb-4 text-[var(--muted-foreground)] mb-4 bg-learn-100 dark:bg-learn-900/30 p-4 rounded-lg text-learn-800 dark:text-learn-300 font-medium bg-red-50 dark:bg-red-900/20 border border-red-200 dark:border-red-800 rounded-lg p-6 flex items-start gap-3 w-6 h-6 text-red-600 dark:text-red-400 flex-shrink-0 mt-0.5 none currentColor 0 0 24 24 round M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.732-.833-2.464 0L4.35 16.5c-.77.833.192 2.5 1.732 2.5z text-lg font-bold text-red-800 dark:text-red-300 mb-2 text-red-700 dark:text-red-300 mb-3 bg-red-100 dark:bg-red-900/30 p-3 rounded border border-red-200 dark:border-red-700 text-red-800 dark:text-red-200 text-sm flex flex-col gap-8 text-3xl font-bold text-slate-900 dark:text-slate-100 https://www.youtube.com/embed/xsR7m6ToUFE Hardware Simulation accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture w-full h-full aspect-video rounded-lg",
    "url": "/running-program",
    "category": "Workshop 1",
    "tags": [
      "running-program",
      "hardware"
    ]
  },
  {
    "id": "search",
    "title": "search",
    "description": "",
    "content": "Search Results Loading search... max-w-4xl mx-auto mb-8 text-3xl font-bold text-slate-900 dark:text-slate-100 mb-4 flex items-center justify-center py-12 animate-spin rounded-full h-8 w-8 border-b-2 border-primary-600 ml-2 text-slate-600 dark:text-slate-300",
    "url": "/search",
    "category": "General",
    "tags": [
      "search"
    ]
  },
  {
    "id": "swerve-drive-project",
    "title": "Creating a Swerve Drive Project",
    "description": "Advanced workshop on implementing swerve drive systems for omnidirectional robot movement.",
    "content": "Creating a Swerve Drive Project /motion-magic Motion Magic /pathplanner Adding PathPlanner",
    "url": "/swerve-drive-project",
    "category": "Workshop 2",
    "tags": [
      "swerve-drive-project"
    ]
  },
  {
    "id": "vision-implementation",
    "title": "Implementing Vision",
    "description": "Practical implementation of vision systems in robot code for target detection and tracking.",
    "content": "Implementing Vision /vision-options Vision Options /logging-options Logging Options",
    "url": "/vision-implementation",
    "category": "Workshop 2",
    "tags": [
      "vision-implementation"
    ]
  },
  {
    "id": "vision-options",
    "title": "Vision Options",
    "description": "Overview of computer vision options for FRC robots including cameras and vision processing.",
    "content": "Vision Options /pathplanner Adding PathPlanner /vision-implementation Implementing Vision",
    "url": "/vision-options",
    "category": "Workshop 2",
    "tags": [
      "vision-options"
    ]
  },
  {
    "id": "vision-shooting",
    "title": "Vision-Based Shooting",
    "description": "Advanced application combining vision systems with shooting mechanisms for accurate targeting.",
    "content": "Vision-Based Shooting /logging-implementation Implementing Logging",
    "url": "/vision-shooting",
    "category": "Workshop 2",
    "tags": [
      "vision-shooting"
    ]
  }
];
